name: Create PR from Comment

on:
  issue_comment:
    types: [edited]

jobs:
  create-pr:
    name: Create PR from Comment
    runs-on: ubuntu-latest
    if: contains(github.event.comment.body, 'Create PR')
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Extract and Create PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            // GitHub Compare URLを解析
            function parseCompareUrl(url) {
              try {
                console.log('Parsing URL:', url);
                const urlObj = new URL(url);
                console.log('URL pathname:', urlObj.pathname);
                
                // パス名から /compare/base...head の部分を抽出
                const pathMatch = urlObj.pathname.match(/\/compare\/(.+)\.\.\.(.+)/);
                if (!pathMatch) {
                  console.error('Path match failed for:', urlObj.pathname);
                  return null;
                }
                
                console.log('Base:', pathMatch[1], 'Head:', pathMatch[2]);
                
                return {
                  base: pathMatch[1],
                  head: pathMatch[2],
                  title: urlObj.searchParams.get('title'),
                  body: urlObj.searchParams.get('body')
                };
              } catch (error) {
                console.error('URL parsing error:', error);
                return null;
              }
            }

            // コメントからCreate PRリンクを検索
            const comment = context.payload.comment.body;
            const urlMatch = comment.match(/https:\/\/github\.com\/[^\/\s]+\/[^\/\s]+\/compare\/[^\s)]+/);
            
            if (!urlMatch) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: '❌ Create PR link not found'
              });
              return;
            }

            // URL解析とPR作成
            try {
              console.log('Found URL:', urlMatch[0]);
              const prInfo = parseCompareUrl(urlMatch[0]);
              console.log('Parsed info:', JSON.stringify(prInfo, null, 2));
              if (!prInfo) throw new Error('Invalid URL format');


              const newPR = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: prInfo.title || `PR: ${prInfo.head} → ${prInfo.base}`,
                body: prInfo.body || `Auto-created PR from ${prInfo.head}`,
                head: prInfo.head,
                base: prInfo.base
              });

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: `✅ PR created: ${newPR.data.html_url}`
              });

            } catch (error) {
              console.error('PR creation error:', error);
              
              // エラーメッセージとレスポンスの詳細をログ出力
              let errorMessage = error.message;
              let shouldCloseIssue = false;
              
              // GitHub API エラーレスポンスの解析
              if (error.status === 422 && error.response?.data?.errors) {
                const errors = error.response.data.errors;
                console.log('Validation errors:', JSON.stringify(errors, null, 2));
                
                // headフィールドのinvalidエラーをチェック
                const headError = errors.find(err => 
                  err.resource === 'PullRequest' && 
                  err.field === 'head' && 
                  err.code === 'invalid'
                );
                
                if (headError) {
                  shouldCloseIssue = true;
                  errorMessage = `Invalid head branch: ${headError.message || 'Branch does not exist or is not accessible'}`;
                }
              }
              
              // エラーコメントを投稿
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: `❌ Error: ${errorMessage}${shouldCloseIssue ? '\n\n🔒 Auto-closing issue due to invalid branch reference.' : ''}`
              });
              
              // headフィールドエラーの場合はissueを自動クローズ
              if (shouldCloseIssue) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.issue.number,
                  state: 'closed',
                  state_reason: 'not_planned'
                });
                
                console.log('Issue automatically closed due to invalid head branch');
              }
            }