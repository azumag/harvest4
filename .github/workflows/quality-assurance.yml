name: Quality Assurance Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: TypeScript compilation check
      run: npm run build
      
    - name: Lint code
      run: npm run lint
      
    - name: Security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Run tests with coverage
      run: npm run test:coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Quality Gate Check
      run: |
        if [ -f coverage/coverage-summary.json ]; then
          echo "Coverage report found, checking thresholds..."
          node -e "
            const coverage = require('./coverage/coverage-summary.json');
            const total = coverage.total;
            console.log('Coverage Summary:');
            console.log('Lines:', total.lines.pct + '%');
            console.log('Functions:', total.functions.pct + '%');
            console.log('Branches:', total.branches.pct + '%');
            console.log('Statements:', total.statements.pct + '%');
            
            const minCoverage = {
              lines: 80,
              functions: 80,
              branches: 70,
              statements: 80
            };
            
            let failed = false;
            Object.keys(minCoverage).forEach(key => {
              if (total[key].pct < minCoverage[key]) {
                console.error(\`❌ \${key} coverage \${total[key].pct}% is below threshold \${minCoverage[key]}%\`);
                failed = true;
              } else {
                console.log(\`✅ \${key} coverage \${total[key].pct}% meets threshold \${minCoverage[key]}%\`);
              }
            });
            
            if (failed) {
              process.exit(1);
            }
          "
        fi

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance tests
      run: npm test -- --testNamePattern="Performance Testing Suite"
      
    - name: Check test execution time
      run: |
        echo "Checking test performance..."
        time npm test > test_performance.log 2>&1 || true
        if [ -f test_performance.log ]; then
          echo "Test execution completed"
          # Add performance analysis here if needed
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security tests
      run: npm test -- --testNamePattern="Security Testing Suite"
      
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Check for secrets in code
      run: |
        echo "Scanning for potential secrets..."
        if grep -r -i "api[_-]?key\|secret\|password\|token" src/ --exclude-dir=__tests__ --exclude="*.test.ts" || true; then
          echo "⚠️  Potential secrets found - please review"
        else
          echo "✅ No obvious secrets found in source code"
        fi

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run enhanced integration tests
      run: npm test -- --testNamePattern="Enhanced Integration Tests"
      
    - name: Run market simulation tests
      run: npm test -- --testNamePattern="Market Simulation Testing"

  financial-accuracy:
    name: Financial Accuracy Tests
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run financial accuracy tests
      run: npm test -- --testNamePattern="Financial Accuracy Testing Suite"
      
    - name: Validate profit calculations
      run: |
        echo "Validating financial calculations..."
        npm test -- --testNamePattern="Profit Calculation Accuracy" --verbose

  qa-system:
    name: QA System Validation
    runs-on: ubuntu-latest
    needs: [quality-gates, performance-tests, security-scan, integration-tests, financial-accuracy]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run QA system tests
      run: npm test -- --testNamePattern="Quality Assurance System"
      
    - name: Generate final quality report
      run: |
        echo "# Quality Assurance Report" > qa_report.md
        echo "Generated on: $(date)" >> qa_report.md
        echo "" >> qa_report.md
        echo "## Test Results" >> qa_report.md
        echo "- ✅ Quality Gates: PASSED" >> qa_report.md
        echo "- ✅ Performance Tests: PASSED" >> qa_report.md
        echo "- ✅ Security Scan: PASSED" >> qa_report.md
        echo "- ✅ Integration Tests: PASSED" >> qa_report.md
        echo "- ✅ Financial Accuracy: PASSED" >> qa_report.md
        echo "- ✅ QA System: PASSED" >> qa_report.md
        echo "" >> qa_report.md
        echo "## Coverage Summary" >> qa_report.md
        if [ -f coverage/coverage-summary.json ]; then
          node -e "
            const coverage = require('./coverage/coverage-summary.json');
            const total = coverage.total;
            console.log('- Lines: ' + total.lines.pct + '%');
            console.log('- Functions: ' + total.functions.pct + '%');
            console.log('- Branches: ' + total.branches.pct + '%');
            console.log('- Statements: ' + total.statements.pct + '%');
          " >> qa_report.md
        fi
        
    - name: Upload QA report
      uses: actions/upload-artifact@v3
      with:
        name: qa-report
        path: qa_report.md

  deploy-ready:
    name: Deployment Ready
    runs-on: ubuntu-latest
    needs: qa-system
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Mark as deployment ready
      run: |
        echo "🚀 All quality gates passed! Ready for deployment."
        echo "✅ Code Quality: PASSED"
        echo "✅ Test Coverage: PASSED"
        echo "✅ Security: PASSED"
        echo "✅ Performance: PASSED"
        echo "✅ Financial Accuracy: PASSED"
        echo "✅ Integration: PASSED"